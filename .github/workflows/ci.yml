name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 后端Go代码检查和测试
  backend:
    name: Backend Go
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 设置Go环境
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache-dependency-path: im-backend/go.sum
    
    - name: 安装依赖
      working-directory: ./im-backend
      run: go mod download
    
    - name: Go格式检查
      working-directory: ./im-backend
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go代码需要格式化:"
          gofmt -l .
          exit 1
        fi
    
    - name: Go Vet静态分析
      working-directory: ./im-backend
      run: go vet ./...
    
    - name: 安装golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
    
    - name: GolangCI-Lint代码质量检查
      working-directory: ./im-backend
      run: golangci-lint run --timeout 5m
    
    - name: 安装gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest
    
    - name: GoSec安全扫描
      working-directory: ./im-backend
      run: gosec -fmt=json -out=gosec-report.json ./... || true
    
    - name: 上传安全扫描报告
      uses: actions/upload-artifact@v4
      with:
        name: gosec-report
        path: im-backend/gosec-report.json
    
    - name: 运行单元测试
      working-directory: ./im-backend
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: 上传覆盖率报告
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: im-backend/coverage.out
    
    - name: 构建检查
      working-directory: ./im-backend
      run: go build -v ./...

  # 前端代码检查和测试
  frontend:
    name: Frontend Admin
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 设置Node环境
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: im-admin/package-lock.json
    
    - name: 安装依赖
      working-directory: ./im-admin
      run: npm ci
    
    - name: ESLint代码检查
      working-directory: ./im-admin
      run: npm run lint || true
    
    - name: 类型检查（如果有TypeScript）
      working-directory: ./im-admin
      run: |
        if [ -f "tsconfig.json" ]; then
          npx vue-tsc --noEmit || true
        fi
    
    - name: 构建检查
      working-directory: ./im-admin
      run: npm run build
    
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: admin-dist
        path: im-admin/dist

  # Docker镜像构建测试
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 构建后端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./im-backend
        file: ./im-backend/Dockerfile.production
        push: false
        tags: im-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 构建管理面板镜像
      uses: docker/build-push-action@v5
      with:
        context: ./im-admin
        file: ./im-admin/Dockerfile.production
        push: false
        tags: im-admin:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全扫描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 运行Trivy漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
      continue-on-error: true
    
    - name: 上传Trivy扫描结果
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # 配置文件验证
  config:
    name: Config Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 验证Docker Compose文件
      run: |
        docker-compose -f docker-compose.production.yml config > /dev/null
        docker-compose -f docker-compose.dev.yml config > /dev/null
    
    - name: 验证YAML文件
      run: |
        sudo apt-get install -y yamllint
        find . -name "*.yml" -o -name "*.yaml" | xargs yamllint -d relaxed
    
    - name: 检查环境变量模板
      run: |
        if [ ! -f "ENV_STRICT_TEMPLATE.md" ]; then
          echo "❌ 缺少ENV_STRICT_TEMPLATE.md"
          exit 1
        fi
        echo "✅ 环境变量模板存在: ENV_STRICT_TEMPLATE.md"

  # 汇总报告
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend, frontend, docker, security, config]
    if: always()
    
    steps:
    - name: 检查CI结果
      run: |
        echo "🎉 所有CI检查完成！"
        echo "Backend: ${{ needs.backend.result }}"
        echo "Frontend: ${{ needs.frontend.result }}"
        echo "Docker: ${{ needs.docker.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Config: ${{ needs.config.result }}"
