name: 志航密信 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  lint:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: 安装 Go 依赖
      run: |
        cd im-backend
        go mod download
        
    - name: Go 代码检查
      run: |
        cd im-backend
        go vet ./...
        go fmt ./...
        
    - name: 设置 Node.js 环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          im-admin/package-lock.json
          
    - name: 安装前端依赖
      run: |
        cd im-admin
        npm ci
        
    - name: 前端代码检查
      run: |
        cd im-admin
        npm run lint

  # 构建测试
  build:
    name: 构建测试
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: 构建后端
      run: |
        cd im-backend
        go build -o bin/zhihang-messenger ./main.go
        
    - name: 设置 Node.js 环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          im-admin/package-lock.json
          
    - name: 构建管理后台
      run: |
        cd im-admin
        npm ci
        npm run build

  # 单元测试
  test:
    name: 单元测试
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: zhihang_messenger_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: 运行后端测试
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_NAME: zhihang_messenger_test
        DB_USER: root
        DB_PASSWORD: root
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        cd im-backend
        go test -v ./...

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Go 安全扫描
      run: |
        cd im-backend
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./...
        
    - name: 设置 Node.js 环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 前端安全扫描
      run: |
        cd im-admin
        npm audit --audit-level moderate

  # 构建 Docker 镜像
  docker:
    name: 构建 Docker 镜像
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录到容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          
    - name: 构建并推送后端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./im-backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: 构建并推送前端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./telegram-web
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: 构建并推送管理后台镜像
      uses: docker/build-push-action@v5
      with:
        context: ./im-admin
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-admin:latest
        labels: ${{ steps.meta.outputs.labels }}

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 部署到测试环境
      run: |
        echo "部署到测试环境..."
        # 这里添加实际的部署脚本
        # 例如：kubectl apply -f k8s/staging/
        # 或者：docker-compose -f docker-compose.staging.yml up -d

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 部署到生产环境
      run: |
        echo "部署到生产环境..."
        # 这里添加实际的部署脚本
        # 例如：kubectl apply -f k8s/production/
        # 或者：docker-compose -f docker-compose.prod.yml up -d

  # 发送通知
  notify:
    name: 发送通知
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 发送成功通知
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      run: |
        echo "✅ 部署成功！"
        # 这里可以添加邮件、钉钉、企业微信等通知
        
    - name: 发送失败通知
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "❌ 部署失败！"
        # 这里可以添加失败通知


