name: 志航密信 CI/CD 流程

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'zhihang-messenger'

jobs:
  # 代码质量检查
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安装 Go 依赖
        run: |
          cd im-backend
          go mod download

      - name: 安装 Node.js 依赖
        run: |
          cd telegram-web && npm ci
          cd ../im-admin && npm ci

      - name: Go 代码格式化检查
        run: |
          cd im-backend
          go fmt ./...
          if [ -n "$(git diff --name-only)" ]; then
            echo "代码格式不正确，请运行 'go fmt ./...'"
            exit 1
          fi

      - name: Go 代码静态分析
        run: |
          cd im-backend
          go vet ./...
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

      - name: TypeScript 类型检查
        run: |
          cd telegram-web && npm run type-check
          cd ../im-admin && npm run type-check

      - name: ESLint 检查
        run: |
          cd telegram-web && npm run lint
          cd ../im-admin && npm run lint

  # 单元测试
  unit-tests:
    name: 单元测试
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: zhihang_messenger_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 等待服务启动
        run: |
          sleep 30

      - name: 运行 Go 单元测试
        run: |
          cd im-backend
          go test -v -race -coverprofile=coverage.out ./...

      - name: 生成 Go 测试覆盖率报告
        run: |
          cd im-backend
          go tool cover -html=coverage.out -o coverage.html

      - name: 上传 Go 覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: go-coverage-report
          path: im-backend/coverage.html

      - name: 运行前端单元测试
        run: |
          cd telegram-web && npm run test:unit
          cd ../im-admin && npm run test:unit

      - name: 生成前端测试覆盖率报告
        run: |
          cd telegram-web && npm run test:coverage
          cd ../im-admin && npm run test:coverage

      - name: 上传前端覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage-report
          path: |
            telegram-web/coverage/
            im-admin/coverage/

  # 集成测试
  integration-tests:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 安装 Python 依赖
        run: |
          pip install requests psutil websocket-client

      - name: 启动服务
        run: |
          docker-compose up -d
          sleep 60

      - name: 运行集成测试
        run: |
          cd scripts/testing
          python3 run_all_tests.py

      - name: 上传测试报告
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: |
            scripts/testing/test_results/*.json
            scripts/testing/test_results/*.log

      - name: 清理服务
        run: |
          docker-compose down

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行 Trivy 安全扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 上传安全扫描结果
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 运行 Snyk 安全扫描
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # 构建 Docker 镜像
  build-images:
    name: 构建 Docker 镜像
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests]
    if: github.event_name == 'push'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建后端镜像
        uses: docker/build-push-action@v5
        with:
          context: ./im-backend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:latest
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 构建前端镜像
        uses: docker/build-push-action@v5
        with:
          context: ./telegram-web
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/web:latest
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 构建管理后台镜像
        uses: docker/build-push-action@v5
        with:
          context: ./im-admin
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/admin:latest
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/admin:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 部署到测试环境
        run: |
          echo "部署到测试环境..."
          # 这里添加实际的部署脚本
          # 例如使用 kubectl 或 docker-compose

      - name: 运行烟雾测试
        run: |
          echo "运行烟雾测试..."
          # 这里添加烟雾测试脚本

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 部署到生产环境
        run: |
          echo "部署到生产环境..."
          # 这里添加实际的部署脚本

      - name: 运行生产环境测试
        run: |
          echo "运行生产环境测试..."
          # 这里添加生产环境测试脚本

  # 通知
  notify:
    name: 发送通知
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: 发送成功通知
        if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
        run: |
          echo "部署成功！"
          # 这里可以添加通知逻辑，如发送邮件、Slack消息等

      - name: 发送失败通知
        if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
        run: |
          echo "部署失败！"
          # 这里可以添加失败通知逻辑
