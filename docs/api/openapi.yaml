openapi: 3.0.3
info:
  title: IM-Suite API
  description: |
    IM-Suite 即时通讯系统 API 规范文档
    
    基于 Telegram 前端改造，提供完整的即时通讯功能：
    - 用户认证与管理
    - 联系人管理
    - 聊天与消息
    - 实时通讯 (WebSocket)
    - 语音/视频通话信令
    - 端到端加密支持
    
    所有接口遵循 RESTful 设计原则，使用 JSON 格式进行数据交换。
  version: 1.0.0
  contact:
    name: IM-Suite Team
    email: support@im-suite.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: 开发环境
  - url: https://api.im-suite.com/api
    description: 生产环境

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # ==================== 健康检查 ====================
  /ping:
    get:
      tags:
        - 系统
      summary: 健康检查
      description: 检查 API 服务是否正常运行
      security: []
      responses:
        '200':
          description: 服务正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "IM Backend 运行正常"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-07T12:00:00Z"

  # ==================== 认证相关 ====================
  /auth/login:
    post:
      tags:
        - 认证
      summary: 用户登录
      description: 使用手机号和验证码/密码进行登录
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
                - code
              properties:
                phone:
                  type: string
                  description: 手机号（国际格式）
                  example: "+8613800000000"
                code:
                  type: string
                  description: 验证码或密码
                  example: "123456"
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT 访问令牌
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refresh_token:
                    type: string
                    description: 刷新令牌
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
                  expires_in:
                    type: integer
                    description: 令牌过期时间（秒）
                    example: 3600
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - 认证
      summary: 刷新令牌
      description: 使用刷新令牌获取新的访问令牌
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: 刷新令牌
      responses:
        '200':
          description: 令牌刷新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: 新的访问令牌
                  expires_in:
                    type: integer
                    description: 令牌过期时间（秒）
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - 认证
      summary: 用户登出
      description: 登出当前用户，使令牌失效
      responses:
        '200':
          description: 登出成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "登出成功"
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ==================== 用户相关 ====================
  /users/me:
    get:
      tags:
        - 用户
      summary: 获取当前用户信息
      description: 获取当前登录用户的详细信息
      responses:
        '200':
          description: 用户信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - 用户
      summary: 更新用户信息
      description: 更新当前用户的个人信息
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  description: 昵称
                  example: "张三"
                avatar_url:
                  type: string
                  format: uri
                  description: 头像 URL
                  example: "https://example.com/avatar.jpg"
                bio:
                  type: string
                  description: 个人简介
                  example: "这是我的个人简介"
                phone:
                  type: string
                  description: 手机号
                  example: "+8613800000000"
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/{user_id}:
    get:
      tags:
        - 用户
      summary: 获取用户信息
      description: 根据用户 ID 获取用户信息
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 用户 ID
      responses:
        '200':
          description: 用户信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ==================== 联系人相关 ====================
  /contacts:
    get:
      tags:
        - 联系人
      summary: 获取联系人列表
      description: 获取当前用户的所有联系人
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: 每页数量
        - name: search
          in: query
          schema:
            type: string
          description: 搜索关键词
      responses:
        '200':
          description: 联系人列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  contacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - 联系人
      summary: 添加联系人
      description: 添加新的联系人
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
              properties:
                phone:
                  type: string
                  description: 手机号
                  example: "+8613800000001"
                nickname:
                  type: string
                  description: 昵称
                  example: "李四"
                remark:
                  type: string
                  description: 备注
                  example: "同事"
      responses:
        '201':
          description: 添加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: 联系人已存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /contacts/{contact_id}:
    delete:
      tags:
        - 联系人
      summary: 删除联系人
      description: 删除指定的联系人
      parameters:
        - name: contact_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 联系人 ID
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "联系人删除成功"
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ==================== 聊天相关 ====================
  /chats:
    get:
      tags:
        - 聊天
      summary: 获取聊天列表
      description: 获取当前用户的聊天列表（最近会话）
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: 每页数量
      responses:
        '200':
          description: 聊天列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  chats:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chat'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /chats/{chat_id}/messages:
    get:
      tags:
        - 聊天
      summary: 获取聊天消息
      description: 获取指定聊天的消息列表
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 聊天 ID
        - name: before
          in: query
          schema:
            type: integer
            format: int64
          description: 获取此消息 ID 之前的消息
        - name: after
          in: query
          schema:
            type: integer
            format: int64
          description: 获取此消息 ID 之后的消息
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: 每页数量
        - name: q
          in: query
          schema:
            type: string
          description: 搜索关键词
        - name: from
          in: query
          schema:
            type: integer
            format: int64
          description: 发送者用户 ID
        - name: to
          in: query
          schema:
            type: integer
            format: int64
          description: 接收者用户 ID
        - name: start_date
          in: query
          schema:
            type: string
            format: date-time
          description: 开始时间
        - name: end_date
          in: query
          schema:
            type: string
            format: date-time
          description: 结束时间
      responses:
        '200':
          description: 消息列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - 聊天
      summary: 发送消息
      description: 向指定聊天发送消息
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 聊天 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - message_type
              properties:
                content:
                  type: string
                  description: 消息内容
                  example: "你好，这是一条测试消息"
                message_type:
                  type: string
                  enum: [text, image, video, audio, voice, file, sticker, gif]
                  description: 消息类型
                  example: "text"
                file_url:
                  type: string
                  format: uri
                  description: 文件 URL（非文本消息时必填）
                file_name:
                  type: string
                  description: 文件名
                file_size:
                  type: integer
                  description: 文件大小（字节）
                mime_type:
                  type: string
                  description: MIME 类型
                reply_to_id:
                  type: integer
                  format: int64
                  description: 回复的消息 ID
                ttl_seconds:
                  type: integer
                  description: 阅后即焚时间（秒）
                  example: 60
                send_silently:
                  type: boolean
                  description: 是否静默发送
                  default: false
                send_at:
                  type: string
                  format: date-time
                  description: 定时发送时间
      responses:
        '201':
          description: 消息发送成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /messages/{message_id}:
    put:
      tags:
        - 聊天
      summary: 编辑消息
      description: 编辑指定的消息
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 消息 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: 新的消息内容
                  example: "这是编辑后的消息"
      responses:
        '200':
          description: 编辑成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - 聊天
      summary: 删除消息
      description: 删除指定的消息（撤回）
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 消息 ID
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "消息删除成功"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /messages/{message_id}/read:
    post:
      tags:
        - 聊天
      summary: 标记消息已读
      description: 标记指定消息为已读
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 消息 ID
      responses:
        '200':
          description: 标记成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "消息已标记为已读"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /chats/{chat_id}/pin:
    post:
      tags:
        - 聊天
      summary: 置顶聊天
      description: 将指定聊天置顶
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 聊天 ID
      responses:
        '200':
          description: 置顶成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "聊天已置顶"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - 聊天
      summary: 取消置顶聊天
      description: 取消置顶指定聊天
      parameters:
        - name: chat_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 聊天 ID
      responses:
        '200':
          description: 取消置顶成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "聊天已取消置顶"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    # ==================== 基础模型 ====================
    User:
      type: object
      required:
        - id
        - phone
        - nickname
        - created_at
      properties:
        id:
          type: integer
          format: int64
          description: 用户 ID
          example: 1
        phone:
          type: string
          description: 手机号
          example: "+8613800000000"
        username:
          type: string
          description: 用户名
          example: "zhangsan"
        nickname:
          type: string
          description: 昵称
          example: "张三"
        avatar_url:
          type: string
          format: uri
          description: 头像 URL
          example: "https://example.com/avatar.jpg"
        bio:
          type: string
          description: 个人简介
          example: "这是我的个人简介"
        is_online:
          type: boolean
          description: 是否在线
          example: true
        last_seen:
          type: string
          format: date-time
          description: 最后上线时间
          example: "2025-10-07T12:00:00Z"
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: "2025-10-07T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: 更新时间
          example: "2025-10-07T12:00:00Z"

    Contact:
      type: object
      required:
        - id
        - user_id
        - contact_id
        - created_at
      properties:
        id:
          type: integer
          format: int64
          description: 联系人记录 ID
          example: 1
        user_id:
          type: integer
          format: int64
          description: 用户 ID
          example: 1
        contact_id:
          type: integer
          format: int64
          description: 联系人用户 ID
          example: 2
        nickname:
          type: string
          description: 联系人昵称
          example: "李四"
        remark:
          type: string
          description: 备注
          example: "同事"
        created_at:
          type: string
          format: date-time
          description: 添加时间
          example: "2025-10-07T10:00:00Z"

    Chat:
      type: object
      required:
        - id
        - type
        - title
        - created_at
      properties:
        id:
          type: integer
          format: int64
          description: 聊天 ID
          example: 1
        type:
          type: string
          enum: [private, group, channel]
          description: 聊天类型
          example: "private"
        title:
          type: string
          description: 聊天标题
          example: "张三"
        description:
          type: string
          description: 聊天描述
          example: "这是一个私聊"
        avatar_url:
          type: string
          format: uri
          description: 聊天头像
          example: "https://example.com/chat_avatar.jpg"
        created_by:
          type: integer
          format: int64
          description: 创建者用户 ID
          example: 1
        last_message:
          $ref: '#/components/schemas/Message'
        unread_count:
          type: integer
          description: 未读消息数
          example: 5
        is_pinned:
          type: boolean
          description: 是否置顶
          example: false
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: "2025-10-07T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: 更新时间
          example: "2025-10-07T12:00:00Z"

    Message:
      type: object
      required:
        - id
        - chat_id
        - sender_id
        - content
        - message_type
        - created_at
      properties:
        id:
          type: integer
          format: int64
          description: 消息 ID
          example: 1
        chat_id:
          type: integer
          format: int64
          description: 聊天 ID
          example: 1
        sender_id:
          type: integer
          format: int64
          description: 发送者用户 ID
          example: 1
        content:
          type: string
          description: 消息内容
          example: "你好，这是一条测试消息"
        message_type:
          type: string
          enum: [text, image, video, audio, voice, file, sticker, gif]
          description: 消息类型
          example: "text"
        file_url:
          type: string
          format: uri
          description: 文件 URL
          example: "https://example.com/file.jpg"
        file_name:
          type: string
          description: 文件名
          example: "image.jpg"
        file_size:
          type: integer
          description: 文件大小（字节）
          example: 1024000
        mime_type:
          type: string
          description: MIME 类型
          example: "image/jpeg"
        reply_to_id:
          type: integer
          format: int64
          description: 回复的消息 ID
          example: 2
        is_edited:
          type: boolean
          description: 是否已编辑
          example: false
        is_deleted:
          type: boolean
          description: 是否已删除
          example: false
        ttl_seconds:
          type: integer
          description: 阅后即焚时间（秒）
          example: 60
        send_at:
          type: string
          format: date-time
          description: 发送时间
          example: "2025-10-07T12:00:00Z"
        is_silent:
          type: boolean
          description: 是否静默发送
          example: false
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: "2025-10-07T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: 更新时间
          example: "2025-10-07T12:00:00Z"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: 当前页码
          example: 1
        limit:
          type: integer
          description: 每页数量
          example: 20
        total:
          type: integer
          description: 总数量
          example: 100
        pages:
          type: integer
          description: 总页数
          example: 5
        has_next:
          type: boolean
          description: 是否有下一页
          example: true
        has_prev:
          type: boolean
          description: 是否有上一页
          example: false

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: 错误代码
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: 错误信息
          example: "请求参数验证失败"
        details:
          type: object
          description: 错误详情
          example:
            field: "phone"
            reason: "手机号格式不正确"

  responses:
    BadRequest:
      description: 请求参数错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "VALIDATION_ERROR"
            message: "请求参数验证失败"
            details:
              field: "phone"
              reason: "手机号格式不正确"

    Unauthorized:
      description: 未授权访问
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "UNAUTHORIZED"
            message: "未提供有效的认证令牌"

    Forbidden:
      description: 禁止访问
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "FORBIDDEN"
            message: "没有权限访问此资源"

    NotFound:
      description: 资源不存在
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "NOT_FOUND"
            message: "请求的资源不存在"

    InternalServerError:
      description: 服务器内部错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "INTERNAL_ERROR"
            message: "服务器内部错误"

tags:
  - name: 系统
    description: 系统相关接口
  - name: 认证
    description: 用户认证相关接口
  - name: 用户
    description: 用户管理相关接口
  - name: 联系人
    description: 联系人管理相关接口
  - name: 聊天
    description: 聊天和消息相关接口
