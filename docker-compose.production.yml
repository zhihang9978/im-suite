version: '3.8'

# 严格模式: 确保所有必要环境变量都已设置
x-environment-check: &env-check
  - ${MYSQL_ROOT_PASSWORD:?请在.env中设置MYSQL_ROOT_PASSWORD}
  - ${MYSQL_DATABASE:?请在.env中设置MYSQL_DATABASE}
  - ${MYSQL_USER:?请在.env中设置MYSQL_USER}
  - ${MYSQL_PASSWORD:?请在.env中设置MYSQL_PASSWORD}
  - ${REDIS_PASSWORD:?请在.env中设置REDIS_PASSWORD}
  - ${MINIO_ROOT_USER:?请在.env中设置MINIO_ROOT_USER}
  - ${MINIO_ROOT_PASSWORD:?请在.env中设置MINIO_ROOT_PASSWORD}
  - ${JWT_SECRET:?请在.env中设置JWT_SECRET}

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: im-mysql-prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./config/mysql/init:/docker-entrypoint-initdb.d
      - ./config/mysql/conf.d:/etc/mysql/conf.d
      - ./backups/mysql:/backups
    networks:
      - im-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: im-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - im-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  # MinIO 对象存储
  minio:
    image: minio/minio:latest
    container_name: im-minio-prod
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    expose:
      - "9000"
      - "9001"
    networks:
      - im-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Go 后端服务
  backend:
    build:
      context: ./im-backend
      dockerfile: Dockerfile.production
    container_name: im-backend-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    environment:
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # MinIO配置
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: "false"
      
      # JWT配置
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: "24h"
      
      # 服务配置
      GIN_MODE: release
      PORT: 8080
      LOG_LEVEL: info
      
      # 文件上传配置
      MAX_FILE_SIZE: "100MB"
      UPLOAD_PATH: "/app/uploads"
      
      # WebRTC配置
      WEBRTC_ICE_SERVERS: ${WEBRTC_ICE_SERVERS}
      
    volumes:
      - backend_uploads:/app/uploads
      - ./logs/backend:/app/logs
    ports:
      - "8080:8080"
    networks:
      - im-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vue 管理后台
  admin:
    build:
      context: ./im-admin
      dockerfile: Dockerfile.production
    container_name: im-admin-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    environment:
      VITE_API_BASE_URL: ${ADMIN_API_BASE_URL}
      VITE_APP_TITLE: "志航密信管理后台"
      VITE_APP_VERSION: "1.0.0"
    volumes:
      - ./logs/admin:/var/log/nginx
    ports:
      - "3001:80"
    networks:
      - im-network
    depends_on:
      - backend
  # Telegram Web 客户端
  web-client:
    build:
      context: ./telegram-web
      dockerfile: Dockerfile.production
    container_name: im-web-prod
    restart: unless-stopped
    environment:
      API_BASE_URL: ${WEB_API_BASE_URL}
      WS_BASE_URL: ${WEB_WS_BASE_URL}
    volumes:
      - ./logs/web:/var/log/nginx
    ports:
      - "3002:80"
    networks:
      - im-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 负载均衡器
  nginx:
    image: nginx:alpine
    container_name: im-nginx-prod
    restart: unless-stopped
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - im-network
    depends_on:
      - backend
      - admin
      - web-client
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: im-prometheus-prod
    restart: unless-stopped
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - im-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: im-grafana-prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - im-network
    depends_on:
      - prometheus

  # 日志收集 - Filebeat
  filebeat:
    image: elastic/filebeat:8.11.0
    container_name: im-filebeat-prod
    restart: unless-stopped
    user: root
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs:/var/log/im-suite
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - im-network
    depends_on:
      - backend
      - admin
      - web-client

  # 备份服务
  backup:
    image: alpine:latest
    container_name: im-backup-prod
    restart: "no"
    volumes:
      - ./scripts/backup:/scripts
      - mysql_data:/backup/mysql
      - redis_data:/backup/redis
      - minio_data:/backup/minio
      - ./backups:/backups
    networks:
      - im-network
    command: |
      sh -c "
        echo 'Backup service ready. Run backup manually or via cron.'
        tail -f /dev/null
      "

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  backend_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  im-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
