# 志航密信生产环境 Docker Compose 配置
# 用于生产环境部署

version: '3.8'

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: zhihang-messenger-mysql-prod
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-zhihang_messenger_root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-zhihang_messenger}
      MYSQL_USER: ${MYSQL_USER:-zhihang_messenger}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-zhihang_messenger_pass}
    ports:
      - "3306:3306"
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./scripts/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - zhihang_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --innodb-buffer-pool-size=256M
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: zhihang-messenger-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
      - ./scripts/redis/redis.conf:/etc/redis/redis.conf
    networks:
      - zhihang_net
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # MinIO 对象存储
  minio:
    image: minio/minio:latest
    container_name: zhihang-messenger-minio-prod
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-zhihang_messenger}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-zhihang_messenger_pass}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_prod_data:/data
    networks:
      - zhihang_net
    restart: unless-stopped
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # 志航密信后端服务
  backend:
    build: 
      context: ./im-backend
      dockerfile: Dockerfile
    container_name: zhihang-messenger-backend-prod
    environment:
      PORT: 8080
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE:-zhihang_messenger}
      DB_USER: ${MYSQL_USER:-zhihang_messenger}
      DB_PASSWORD: ${MYSQL_PASSWORD:-zhihang_messenger_pass}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-zhihang_messenger}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-zhihang_messenger_pass}
      JWT_SECRET: ${JWT_SECRET:-zhihang_messenger_secret_key_2024_prod}
      JWT_EXPIRE_HOURS: 24
      LOG_LEVEL: info
      APP_ENV: production
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - zhihang_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/ping"]
      timeout: 10s
      retries: 5
      interval: 30s
    volumes:
      - ./im-backend/logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # 志航密信 Web 端
  web:
    build:
      context: ./telegram-web
      dockerfile: Dockerfile
    container_name: zhihang-messenger-web-prod
    environment:
      VITE_API_BASE_URL: ${API_BASE_URL:-https://your-domain.com/api}
      VITE_WS_BASE_URL: ${WS_BASE_URL:-wss://your-domain.com/ws}
      VITE_APP_TITLE: ${APP_TITLE:-志航密信}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - zhihang_net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 志航密信管理后台
  admin:
    build:
      context: ./im-admin
      dockerfile: Dockerfile
    container_name: zhihang-messenger-admin-prod
    environment:
      VITE_API_BASE_URL: ${API_BASE_URL:-https://your-domain.com/api}
      VITE_WS_BASE_URL: ${WS_BASE_URL:-wss://your-domain.com/ws}
      VITE_APP_TITLE: ${ADMIN_TITLE:-志航密信管理后台}
    ports:
      - "3001:3001"
    depends_on:
      - backend
    networks:
      - zhihang_net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: zhihang-messenger-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./scripts/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./scripts/nginx/conf.d:/etc/nginx/conf.d
      - ./scripts/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - web
      - admin
    networks:
      - zhihang_net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # 监控 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: zhihang-messenger-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - zhihang_net
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # 监控 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: zhihang-messenger-grafana-prod
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/grafana/provisioning:/etc/grafana/provisioning
      - ./scripts/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    networks:
      - zhihang_net
    restart: unless-stopped

volumes:
  mysql_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  minio_prod_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  zhihang_net:
    driver: bridge
